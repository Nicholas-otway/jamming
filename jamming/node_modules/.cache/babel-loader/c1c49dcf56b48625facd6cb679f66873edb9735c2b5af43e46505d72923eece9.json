{"ast":null,"code":"let userToken;\nconst clientID = \"d6dcfa48eb5d4b40a1e37e15b909dff9\";\nconst redirectURI = \"http://localhost:3000\";\nconst Spotify = {\n  getAccessToken() {\n    //first check for the access token\n    if (userToken) return userToken;\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlTokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n\n    //second check for the access token\n    if (urlAccessToken && urlTokenExpiration) {\n      //setting access token and expiry time var;\n      userToken = urlAccessToken;\n      const tokenExpire = number(urlTokenExpiration[1]);\n\n      //setting the function which will reset the access token when it  expires\n      window.setTimeout(() => userToken = \"\", tokenExpire * 1000);\n\n      //Cleari the url after the access token is expired\n      window.history.pushState(\"User token\", null, \"/\");\n      return userToken;\n    }\n\n    //third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-\n    // modify-public&redirect_uri=${redirectURI}`;\n    window.location = redirect;\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["userToken","clientID","redirectURI","Spotify","getAccessToken","urlAccessToken","window","location","href","match","urlTokenExpiration","tokenExpire","number","setTimeout","history","pushState","redirect"],"sources":["/Users/grimotway/Documents/ReactJammingProject/jamming/src/util/Spotify.js"],"sourcesContent":["\n\nlet userToken; \nconst clientID = \"d6dcfa48eb5d4b40a1e37e15b909dff9\";\nconst redirectURI = \"http://localhost:3000\"\n\nconst Spotify = {\n   getAccessToken(){\n    //first check for the access token\n    if(userToken)\n        return userToken;\n        const urlAccessToken =  window.location.href.match(/access_token=([^&]*)/);\n        const urlTokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n\n    //second check for the access token\n    if(urlAccessToken && urlTokenExpiration){\n    //setting access token and expiry time var;\n        userToken = urlAccessToken;\n        const tokenExpire = number(urlTokenExpiration[1]);\n\n    //setting the function which will reset the access token when it  expires\n       window.setTimeout(() => (userToken = \"\"), tokenExpire * 1000);\n\n    //Cleari the url after the access token is expired\n       window.history.pushState(\"User token\", null, \"/\");\n       return userToken;\n    }\n    \n    //third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-\n    // modify-public&redirect_uri=${redirectURI}`;\n    window.location = redirect;\n  }\n};\n \nexport default Spotify;"],"mappings":"AAEA,IAAIA,SAAS;AACb,MAAMC,QAAQ,GAAG,kCAAkC;AACnD,MAAMC,WAAW,GAAG,uBAAuB;AAE3C,MAAMC,OAAO,GAAG;EACbC,cAAcA,CAAA,EAAE;IACf;IACA,IAAGJ,SAAS,EACR,OAAOA,SAAS;IAChB,MAAMK,cAAc,GAAIC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC;IAC1E,MAAMC,kBAAkB,GAAGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC;;IAE/E;IACA,IAAGJ,cAAc,IAAIK,kBAAkB,EAAC;MACxC;MACIV,SAAS,GAAGK,cAAc;MAC1B,MAAMM,WAAW,GAAGC,MAAM,CAACF,kBAAkB,CAAC,CAAC,CAAC,CAAC;;MAErD;MACGJ,MAAM,CAACO,UAAU,CAAC,MAAOb,SAAS,GAAG,EAAG,EAAEW,WAAW,GAAG,IAAI,CAAC;;MAEhE;MACGL,MAAM,CAACQ,OAAO,CAACC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,GAAG,CAAC;MACjD,OAAOf,SAAS;IACnB;;IAEA;IACA,MAAMgB,QAAQ,GAAG,oDAAoDf,QAAQ;AACjF,oCAAoCC,WAAW,EAAE;IAC7CI,MAAM,CAACC,QAAQ,GAAGS,QAAQ;EAC5B;AACF,CAAC;AAED,eAAeb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}