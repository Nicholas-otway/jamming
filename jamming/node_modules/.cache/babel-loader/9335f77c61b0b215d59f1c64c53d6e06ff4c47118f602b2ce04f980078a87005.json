{"ast":null,"code":"let accessToken = \"\";\nconst clientID = \"d6dcfa48eb5d4b40a1e37e15b909dff9\";\nconst redirectURI = \"http://localhost:3000\";\nconst Spotify = {\n  getAccessToken() {\n    //first check for the access token\n    if (accessToken) return accessToken;\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlTokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n\n    //second check for the access token\n    if (urlAccessToken && urlTokenExpiration) {\n      //setting access token and expiry time var;\n      accessToken = urlAccessToken;\n      const tokenExpire = Number(urlTokenExpiration[1]);\n\n      //setting the function which will reset the access token when it  expires\n      window.setTimeout(() => accessToken = \"\", tokenExpire * 1000);\n\n      //Cleari the url after the access token is expired\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    //third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}\n    &response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    window.location = redirect;\n  },\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse) {\n        console.log(\"Error\");\n      }\n      return jsonResponse.tracks.items.map(trac => ({\n        id: trac.id,\n        name: trac.name,\n        artist: trac.artist[0].name,\n        album: trac.album.name,\n        uri: trac.uri\n      }));\n    });\n  }\n};\nexport { Spotify };","map":{"version":3,"names":["accessToken","clientID","redirectURI","Spotify","getAccessToken","urlAccessToken","window","location","href","match","urlTokenExpiration","tokenExpire","Number","setTimeout","history","pushState","redirect","search","term","fetch","method","headers","Authorization","then","response","json","jsonResponse","console","log","tracks","items","map","trac","id","name","artist","album","uri"],"sources":["/Users/grimotway/Documents/ReactJammingProject/jamming/src/util/Spotify/Spotify.js"],"sourcesContent":["\nlet accessToken = \"\";\nconst clientID = \"d6dcfa48eb5d4b40a1e37e15b909dff9\";\nconst redirectURI = \"http://localhost:3000\";\n\nconst Spotify = {\n  getAccessToken() {\n    //first check for the access token\n    if (accessToken) return accessToken;\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlTokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n\n    //second check for the access token\n    if (urlAccessToken && urlTokenExpiration) {\n      //setting access token and expiry time var;\n      accessToken = urlAccessToken;\n      const tokenExpire = Number(urlTokenExpiration[1]);\n\n      //setting the function which will reset the access token when it  expires\n      window.setTimeout(() => (accessToken = \"\"), tokenExpire * 1000);\n\n      //Cleari the url after the access token is expired\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    //third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}\n    &response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    window.location = redirect;\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n    .then((response) => response.json())\n    .then(jsonResponse =>{\n        if(!jsonResponse){\n            console.log(\"Error\")\n        }\n        return jsonResponse.tracks.items.map(trac =>({\n            id: trac.id,\n            name: trac.name,\n            artist: trac.artist[0].name,\n            album: trac.album.name,\n            uri: trac.uri\n        }))\n    })\n  },\n};\n\nexport { Spotify };"],"mappings":"AACA,IAAIA,WAAW,GAAG,EAAE;AACpB,MAAMC,QAAQ,GAAG,kCAAkC;AACnD,MAAMC,WAAW,GAAG,uBAAuB;AAE3C,MAAMC,OAAO,GAAG;EACdC,cAAcA,CAAA,EAAG;IACf;IACA,IAAIJ,WAAW,EAAE,OAAOA,WAAW;IACnC,MAAMK,cAAc,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC;IACzE,MAAMC,kBAAkB,GAAGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC;;IAE3E;IACA,IAAIJ,cAAc,IAAIK,kBAAkB,EAAE;MACxC;MACAV,WAAW,GAAGK,cAAc;MAC5B,MAAMM,WAAW,GAAGC,MAAM,CAACF,kBAAkB,CAAC,CAAC,CAAC,CAAC;;MAEjD;MACAJ,MAAM,CAACO,UAAU,CAAC,MAAOb,WAAW,GAAG,EAAG,EAAEW,WAAW,GAAG,IAAI,CAAC;;MAE/D;MACAL,MAAM,CAACQ,OAAO,CAACC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,GAAG,CAAC;MACnD,OAAOf,WAAW;IACpB;;IAEA;IACA,MAAMgB,QAAQ,GAAG,oDAAoDf,QAAQ;AACjF,qEAAqEC,WAAW,EAAE;IAC9EI,MAAM,CAACC,QAAQ,GAAGS,QAAQ;EAC5B,CAAC;EAEDC,MAAMA,CAACC,IAAI,EAAE;IACXlB,WAAW,GAAGG,OAAO,CAACC,cAAc,CAAC,CAAC;IACtC,OAAOe,KAAK,CAAC,kDAAkDD,IAAI,EAAE,EAAE;MACrEE,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUtB,WAAW;MAAG;IACpD,CAAC,CAAC,CACDuB,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAACG,YAAY,IAAG;MACjB,IAAG,CAACA,YAAY,EAAC;QACbC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACxB;MACA,OAAOF,YAAY,CAACG,MAAM,CAACC,KAAK,CAACC,GAAG,CAACC,IAAI,KAAI;QACzCC,EAAE,EAAED,IAAI,CAACC,EAAE;QACXC,IAAI,EAAEF,IAAI,CAACE,IAAI;QACfC,MAAM,EAAEH,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,CAACD,IAAI;QAC3BE,KAAK,EAAEJ,IAAI,CAACI,KAAK,CAACF,IAAI;QACtBG,GAAG,EAAEL,IAAI,CAACK;MACd,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;EACJ;AACF,CAAC;AAED,SAASlC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}