{"ast":null,"code":"/*let accessToken = \"\";\nconst clientID = \"16d9887644e0457db5532ebebd476d30\";\n const redirectUrl = \"http://localhost:3000\";\n//const redirectUrl = \"https://syphersjammmingproject.surge.sh\";\n\nconst Spotify = {\n  getAccessToken() {\n    // First check for the access token\n    if (accessToken) return accessToken;\n\n    const tokenInURL = window.location.href.match(/access_token=([^&]*)/);\n    const expiryTime = window.location.href.match(/expires_in=([^&]*)/);\n\n    // Second check for the access token\n    if (tokenInURL && expiryTime) {\n      // setting access token and expiry time variables\n      accessToken = tokenInURL[1];\n      const expiresIn = Number(expiryTime[1]);\n\n      // Setting the access token to expire at the value for expiration time\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      // clearing the url after the access token expires\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    // Third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\n    window.location = redirect;\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        if (!jsonResponse) {\n          console.error(\"Response error\");\n        }\n        return jsonResponse.tracks.items.map((t) => ({\n          id: t.id,\n          name: t.name,\n          artist: t.artists[0].name,\n          album: t.album.name,\n          uri: t.uri,\n        }));\n      });\n  },\n};\nexport { Spotify };*/\n\n/*\nlet accessToken = \"\";\nconst clientID = \"d6dcfa48eb5d4b40a1e37e15b909dff9\";\n//const redirectUrl = \"http://localhost:3000\";\n\n\n\nconst Spotify = {\n  getAccessToken() {\n    //first check for the access token\n    if (accessToken) return accessToken;\n\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlTokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n\n    //second check for the access token\n    if (urlAccessToken && urlTokenExpiration) {\n      //setting access token and expiry time var;\n      accessToken = urlAccessToken[1];\n      const tokenExpire = Number(urlTokenExpiration[1]);\n\n      //setting the function which will reset the access token when it  expires\n      window.setTimeout(() => (accessToken = \"\"), tokenExpire * 1000);\n\n      //Cleari the url after the access token is expired\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    //third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\n    window.location = redirect;\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n    .then((response) => response.json())\n    .then(jsonResponse =>{\n        if(!jsonResponse){\n            console.log(\"Error\")\n        }\n           console.log(accessToken);\n        return jsonResponse.tracks.items.map(trac =>({\n            id: trac.id,\n            name: trac.name,\n            artist: trac.artists[0].name,\n            album: trac.album.name,\n            uri: trac.uri\n        }))\n    })\n  },\n};\n\nexport { Spotify };*/","map":{"version":3,"names":[],"sources":["/Users/grimotway/Documents/ReactJammingProject/jamming/src/util/Spotify/Spotify.js"],"sourcesContent":["/*let accessToken = \"\";\nconst clientID = \"16d9887644e0457db5532ebebd476d30\";\n const redirectUrl = \"http://localhost:3000\";\n//const redirectUrl = \"https://syphersjammmingproject.surge.sh\";\n\nconst Spotify = {\n  getAccessToken() {\n    // First check for the access token\n    if (accessToken) return accessToken;\n\n    const tokenInURL = window.location.href.match(/access_token=([^&]*)/);\n    const expiryTime = window.location.href.match(/expires_in=([^&]*)/);\n\n    // Second check for the access token\n    if (tokenInURL && expiryTime) {\n      // setting access token and expiry time variables\n      accessToken = tokenInURL[1];\n      const expiresIn = Number(expiryTime[1]);\n\n      // Setting the access token to expire at the value for expiration time\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      // clearing the url after the access token expires\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    // Third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\n    window.location = redirect;\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        if (!jsonResponse) {\n          console.error(\"Response error\");\n        }\n        return jsonResponse.tracks.items.map((t) => ({\n          id: t.id,\n          name: t.name,\n          artist: t.artists[0].name,\n          album: t.album.name,\n          uri: t.uri,\n        }));\n      });\n  },\n};\nexport { Spotify };*/\n\n\n\n\n\n/*\nlet accessToken = \"\";\nconst clientID = \"d6dcfa48eb5d4b40a1e37e15b909dff9\";\n//const redirectUrl = \"http://localhost:3000\";\n\n\n\nconst Spotify = {\n  getAccessToken() {\n    //first check for the access token\n    if (accessToken) return accessToken;\n\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlTokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n\n    //second check for the access token\n    if (urlAccessToken && urlTokenExpiration) {\n      //setting access token and expiry time var;\n      accessToken = urlAccessToken[1];\n      const tokenExpire = Number(urlTokenExpiration[1]);\n\n      //setting the function which will reset the access token when it  expires\n      window.setTimeout(() => (accessToken = \"\"), tokenExpire * 1000);\n\n      //Cleari the url after the access token is expired\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    //third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\n    window.location = redirect;\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n    .then((response) => response.json())\n    .then(jsonResponse =>{\n        if(!jsonResponse){\n            console.log(\"Error\")\n        }\n           console.log(accessToken);\n        return jsonResponse.tracks.items.map(trac =>({\n            id: trac.id,\n            name: trac.name,\n            artist: trac.artists[0].name,\n            album: trac.album.name,\n            uri: trac.uri\n        }))\n    })\n  },\n};\n\nexport { Spotify };*/"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}