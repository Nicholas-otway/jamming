{"ast":null,"code":"/*let accessToken = \"\";\nconst clientID = \"16d9887644e0457db5532ebebd476d30\";\n// const redirectUrl = \"http://localhost:3000\";\nconst redirectUrl =  \n\nconst Spotify = {\n  getAccessToken() {\n    // First check for the access token\n    if (accessToken) return accessToken;\n\n    const tokenInURL = window.location.href.match(/access_token=([^&]*)/);\n    const expiryTime = window.location.href.match(/expires_in=([^&]*)/);\n\n    // Second check for the access token\n    if (tokenInURL && expiryTime) {\n      // setting access token and expiry time variables\n      accessToken = tokenInURL[1];\n      const expiresIn = Number(expiryTime[1]);\n\n      // Setting the access token to expire at the value for expiration time\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      // clearing the url after the access token expires\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    // Third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\n    window.location = redirect;\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        if (!jsonResponse) {\n          console.error(\"Response error\");\n        }\n        return jsonResponse.tracks.items.map((t) => ({\n          id: t.id,\n          name: t.name,\n          artist: t.artists[0].name,\n          album: t.album.name,\n          uri: t.uri,\n        }));\n      });\n  },\n};\nexport { Spotify };*/let accessToken=\"\";const clientID=\"d6dcfa48eb5d4b40a1e37e15b909dff9\";//const redirectUrl = \"http://localhost:3000\";\nconst redirectUrl=\"https://Otwaysjammingproject.surge.sh\";const Spotify={getAccessToken(){//first check for the access token\nif(accessToken)return accessToken;const urlAccessToken=window.location.href.match(/access_token=([^&]*)/);const urlTokenExpiration=window.location.href.match(/expires_in=([^&]*)/);//second check for the access token\nif(urlAccessToken&&urlTokenExpiration){//setting access token and expiry time var;\naccessToken=urlAccessToken[1];const tokenExpire=Number(urlTokenExpiration[1]);//setting the function which will reset the access token when it  expires\nwindow.setTimeout(()=>accessToken=\"\",tokenExpire*1000);//Cleari the url after the access token is expired\nwindow.history.pushState(\"Access token\",null,\"/\");return accessToken;}//third check for the access token if the first and second check are both false\nconst redirect=`https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;window.location=redirect;},search(term){accessToken=Spotify.getAccessToken();return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{method:\"GET\",headers:{Authorization:`Bearer ${accessToken}`}}).then(response=>response.json()).then(jsonResponse=>{if(!jsonResponse){console.log(\"Error\");}console.log(accessToken);return jsonResponse.tracks.items.map(trac=>({id:trac.id,name:trac.name,artist:trac.artists.name,album:trac.album.name,uri:trac.uri}));});}};export{Spotify};","map":{"version":3,"names":["accessToken","clientID","redirectUrl","Spotify","getAccessToken","urlAccessToken","window","location","href","match","urlTokenExpiration","tokenExpire","Number","setTimeout","history","pushState","redirect","search","term","fetch","method","headers","Authorization","then","response","json","jsonResponse","console","log","tracks","items","map","trac","id","name","artist","artists","album","uri"],"sources":["/Users/grimotway/Documents/ReactJammingProject/jamming/src/util/Spotify/Spotify.js"],"sourcesContent":["/*let accessToken = \"\";\nconst clientID = \"16d9887644e0457db5532ebebd476d30\";\n// const redirectUrl = \"http://localhost:3000\";\nconst redirectUrl =  \n\nconst Spotify = {\n  getAccessToken() {\n    // First check for the access token\n    if (accessToken) return accessToken;\n\n    const tokenInURL = window.location.href.match(/access_token=([^&]*)/);\n    const expiryTime = window.location.href.match(/expires_in=([^&]*)/);\n\n    // Second check for the access token\n    if (tokenInURL && expiryTime) {\n      // setting access token and expiry time variables\n      accessToken = tokenInURL[1];\n      const expiresIn = Number(expiryTime[1]);\n\n      // Setting the access token to expire at the value for expiration time\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      // clearing the url after the access token expires\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    // Third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\n    window.location = redirect;\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        if (!jsonResponse) {\n          console.error(\"Response error\");\n        }\n        return jsonResponse.tracks.items.map((t) => ({\n          id: t.id,\n          name: t.name,\n          artist: t.artists[0].name,\n          album: t.album.name,\n          uri: t.uri,\n        }));\n      });\n  },\n};\nexport { Spotify };*/\n\n\n\n\n\n\nlet accessToken = \"\";\nconst clientID = \"d6dcfa48eb5d4b40a1e37e15b909dff9\";\n//const redirectUrl = \"http://localhost:3000\";\nconst redirectUrl = \"https://Otwaysjammingproject.surge.sh\";  \n\n\nconst Spotify = {\n  getAccessToken() {\n    //first check for the access token\n    if (accessToken) return accessToken;\n\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlTokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n\n    //second check for the access token\n    if (urlAccessToken && urlTokenExpiration) {\n      //setting access token and expiry time var;\n      accessToken = urlAccessToken[1];\n      const tokenExpire = Number(urlTokenExpiration[1]);\n\n      //setting the function which will reset the access token when it  expires\n      window.setTimeout(() => (accessToken = \"\"), tokenExpire * 1000);\n\n      //Cleari the url after the access token is expired\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    //third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\n    window.location = redirect;\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n    .then((response) => response.json())\n    .then(jsonResponse =>{\n        if(!jsonResponse){\n            console.log(\"Error\")\n        }\n           console.log(accessToken);\n        return jsonResponse.tracks.items.map(trac =>({\n            id: trac.id,\n            name: trac.name,\n            artist: trac.artists.name,\n            album: trac.album.name,\n            uri: trac.uri\n        }))\n    })\n  },\n};\n\nexport { Spotify };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAOA,GAAI,CAAAA,WAAW,CAAG,EAAE,CACpB,KAAM,CAAAC,QAAQ,CAAG,kCAAkC,CACnD;AACA,KAAM,CAAAC,WAAW,CAAG,uCAAuC,CAG3D,KAAM,CAAAC,OAAO,CAAG,CACdC,cAAcA,CAAA,CAAG,CACf;AACA,GAAIJ,WAAW,CAAE,MAAO,CAAAA,WAAW,CAEnC,KAAM,CAAAK,cAAc,CAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC,CACzE,KAAM,CAAAC,kBAAkB,CAAGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC,CAE3E;AACA,GAAIJ,cAAc,EAAIK,kBAAkB,CAAE,CACxC;AACAV,WAAW,CAAGK,cAAc,CAAC,CAAC,CAAC,CAC/B,KAAM,CAAAM,WAAW,CAAGC,MAAM,CAACF,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAEjD;AACAJ,MAAM,CAACO,UAAU,CAAC,IAAOb,WAAW,CAAG,EAAG,CAAEW,WAAW,CAAG,IAAI,CAAC,CAE/D;AACAL,MAAM,CAACQ,OAAO,CAACC,SAAS,CAAC,cAAc,CAAE,IAAI,CAAE,GAAG,CAAC,CACnD,MAAO,CAAAf,WAAW,CACpB,CAEA;AACA,KAAM,CAAAgB,QAAQ,CAAG,oDAAoDf,QAAQ,kEAAkEC,WAAW,EAAE,CAC5JI,MAAM,CAACC,QAAQ,CAAGS,QAAQ,CAC5B,CAAC,CAEDC,MAAMA,CAACC,IAAI,CAAE,CACXlB,WAAW,CAAGG,OAAO,CAACC,cAAc,CAAC,CAAC,CACtC,MAAO,CAAAe,KAAK,CAAC,kDAAkDD,IAAI,EAAE,CAAC,CACpEE,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CAAEC,aAAa,CAAE,UAAUtB,WAAW,EAAG,CACpD,CAAC,CAAC,CACDuB,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAACG,YAAY,EAAG,CACjB,GAAG,CAACA,YAAY,CAAC,CACbC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC,CACxB,CACGD,OAAO,CAACC,GAAG,CAAC5B,WAAW,CAAC,CAC3B,MAAO,CAAA0B,YAAY,CAACG,MAAM,CAACC,KAAK,CAACC,GAAG,CAACC,IAAI,GAAI,CACzCC,EAAE,CAAED,IAAI,CAACC,EAAE,CACXC,IAAI,CAAEF,IAAI,CAACE,IAAI,CACfC,MAAM,CAAEH,IAAI,CAACI,OAAO,CAACF,IAAI,CACzBG,KAAK,CAAEL,IAAI,CAACK,KAAK,CAACH,IAAI,CACtBI,GAAG,CAAEN,IAAI,CAACM,GACd,CAAC,CAAC,CAAC,CACP,CAAC,CAAC,CACJ,CACF,CAAC,CAED,OAASnC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}